*환경 설정
-JRE System Libarary 1.8 변경
-java compiler 1.8 변경
-Project Fasets 1.8 변경
-pom.xml java 1.8 변경
-spring (4.3.17.RELEASE)

*database 설정
pom.xml
-db-connector 설정(mysql-connector-java)
-connection pool (c3p0)
-spring-jdbc
-mybatis
-mybatis-spring

servlet-context
-dataSource(db연결 정보 설정)
-sqlSessionFactory(커넥션pool, sql mapper 연결)
-sqlSession(템플릿 클래스 등록)

*기타
-spring-tx(트랜잭션)
-spring-test(테스트)


** root-context.xml
-transaction 처리 (DataSourceTransactionManager Bean 등록)


한글 안 될 때 useSSL=false&amp;characterEncoding=UTF-8&amp;useUnicode=true
ex) 
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>	
		<property name="url" value="jdbc:log4jdbc:mysql://127.0.0.1:3306/book_ex?useSSL=false&amp;characterEncoding=UTF8&amp;useUnicode=true"></property>
		<property name="username" value="zerock"></property>
		<property name="password" value="zerock"></property>
</bean>

**Mybatis 사용
-라이브러리
mvnrepository - mybatis 검색 -3.4.1
mybatis spring - 1.3.0
pom.xml에 등록

servlet-context.xml
dataSource 빈 등록(db 연결정보)
sqlSessionFactory 빈 등록(데이터베이스 연결정보 설정, pool 설정, mapper 등록)


namespace 
- 속성
 resultType ="com.org....Member" Member 객체에 담아서 반환
 parameterType = "com.org....Member" Member 객체의 getter를 써서 #{멤버변수} 로 담는다

**파일 업로드
commons-io 2.5
commons-fileupload 1.3.3
pom.xml에 등록

<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  <beans:property name="defaultEncoding">   <beans:value>utf-8</beans:value>  </beans:property> </beans:bean>  
빈 등록 - servlet-Context

** ViewResolver를 통한 파일 다운로드 응답

-1. servlet-context.xml
<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
		<!-- order를 통해서 너의 우선순위는 2라고 준 거임 -->
	</beans:bean>
2. viewResolver에 BeanNameViewResolver 빈 등록
<!-- 커스텀뷰 처리를 위한 Resolver 등록 -->
	<beans:bean id="viewResolver"
				class="org.springframework.web.servlet.view.BeanNameViewResolver"
				p:order="1"
	 />
3. 사용할 뷰를 빈으로 등록
<beans:bean id="download"
				class="com.bitcamp.cumtomview.DownloadView"
	 />

** 메일 발송
[라이브러리 의존 설정]
<!-- 필요한 설정-->
  <!-- spring-context-support -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context-support</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
  <!-- javax.mail-->
		<dependency>
		    <groupId>javax.mail</groupId>
		    <artifactId>mail</artifactId>
		    <version>1.4.7</version>
		</dependency>
  <!-- 메일 설정 시작  -->
  <!-- ======================================================== -->
  <!-- javax.mail/mail -->
  <dependency>
   <groupId>javax.mail</groupId>
   <artifactId>mail</artifactId>
   <version>1.4.7</version>
  </dependency>

  <dependency>
   <groupId>org.springframework</groupId>
   <artifactId>spring-context-support</artifactId>
   <version>${org.springframework-version}</version>
  </dependency>
 
  

  <!-- ======================================================== -->
  


[스프링 컨테이너 설정 파일 빈 등록 설정]



<beans:bean id="mailSender"
  class="org.springframework.mail.javamail.JavaMailSenderImpl">
  <beans:property name="host" value="smtp.gmail.com" /> //SMTP host 서버 주소
  <beans:property name="port" value="587" /><!-- 465 or 25--> // 기본이 25인데 달라지기도 함
  <beans:property name="username" value="[gmail 계정]" /> // setFrom() 메소드에서 내가 적고 싶은 보내는 사람 메일 주소 써도 일단 사용자는 여기 있는 gmail 계정이 들어간다. 왜냐면 보안
  <beans:property name="password" value="[비밀번호]" />
  <beans:property name="defaultEncoding" value="utf-8" />
  <beans:property name="javaMailProperties">
   <beans:props><!-- 요거는 지메일일때 쓰는 속성들 -->
    <beans:prop key="mail.transport.protocol">smtp</beans:prop>
    <beans:prop key="mail.smtp.auth">true</beans:prop> // gmail 사용자 인증 받아야 메일 보낼 수 있다
    <beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
    <beans:prop key="mail.debug">true</beans:prop> // 메일 보낼 때 밑에다가 로그를 찍어줍니다
   </beans:props>
  </beans:property>
 </beans:bean>





[sendMail 클래스]

package com.bitcamp.memberboard.mail;

import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;

import com.bitcamp.memberboard.member.model.Member;
public class SimpleRegistrationNotifier {
 @Autowired
 private MailSender mailSender;
 
 public void sendMail(Member member) {
  SimpleMailMessage message = new SimpleMailMessage();
  message.setSubject("[Simple] 회원 가입을 축하합니다.");
  message.setFrom("isincorp@gmail.com");
  message.setText("회원 가입을 환영합니다.");
  message.setTo(member.getMemberid());
  try {
   mailSender.send(message);
  } catch (MailException ex) {
   ex.printStackTrace();
  }
 }

 public void sendMail(String memberemail) {
  SimpleMailMessage message = new SimpleMailMessage();
  message.setSubject("[Simple] 회원 가입 안내");
  message.setFrom("isisncorp@gmail.com");
  message.setText("회원 가입을 환영합니다.");
  message.setTo(memberemail);
  try {
   mailSender.send(message);
  } catch (MailException ex) {
   ex.printStackTrace();
  }

 }
}
